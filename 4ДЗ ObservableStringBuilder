import .util.ArrayList;
import java.util.List;

public class ObservableStringBuilder {

    private final StringBuilder stringBuilder;
    private final List<Observer> observers = new ArrayList<>();

    public ObservableStringBuilder() {
        this.stringBuilder = new StringBuilder();
    }

    public ObservableStringBuilder(int capacity) {
        try {
            this.stringBuilder = new StringBuilder(capacity);
        } catch (IllegalArgumentException e) {
            System.err.println("Ошибка при создании StringBuilder с заданной вместимостью: " + e.getMessage());
            this.stringBuilder = new StringBuilder(); // Создаем с вместимостью по умолчанию
        }
    }

    public ObservableStringBuilder(CharSequence seq) {
        try {
            this.stringBuilder = new StringBuilder(seq);
        } catch (NullPointerException e) {
            System.err.println("Ошибка при создании StringBuilder из CharSequence: " + e.getMessage());
            this.stringBuilder = new StringBuilder(); // Создаем пустой
        }
    }

    public ObservableStringBuilder(String str) {
        try {
            this.stringBuilder = new StringBuilder(str);
        } catch (NullPointerException e) {
            System.err.println("Ошибка при создании StringBuilder из String: " + e.getMessage());
            this.stringBuilder = new StringBuilder(); // Создаем пустой
        }
    }

    // Методы делегированные StringBuilder и уведомляющие наблюдателей

    public ObservableStringBuilder append(Object obj) {
        try {
            stringBuilder.append(obj);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(Object): " + e.getMessage());
            // Можно предпринять другие действия, например, логировать ошибку.
        }
        return this;
    }

    public ObservableStringBuilder append(String str) {
        try {
            stringBuilder.append(str);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(String): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(StringBuffer sb) {
        try {
            stringBuilder.append(sb);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(StringBuffer): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(CharSequence s) {
        try {
            stringBuilder.append(s);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(CharSequence): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(CharSequence s, int start, int end) {
        try {
            stringBuilder.append(s, start, end);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(CharSequence, int, int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(char[] str) {
        try {
            stringBuilder.append(str);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(char[]): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(char[] str, int offset, int len) {
        try {
            stringBuilder.append(str, offset, len);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(char[], int, int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(boolean b) {
        try {
            stringBuilder.append(b);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(boolean): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(char c) {
        try {
            stringBuilder.append(c);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(char): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(int i) {
        try {
            stringBuilder.append(i);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(long lng) {
        try {
            stringBuilder.append(lng);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(long): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(float f) {
        try {
            stringBuilder.append(f);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(float): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder append(double d) {
        try {
            stringBuilder.append(d);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при append(double): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder appendCodePoint(int codePoint) {
        try {
            stringBuilder.appendCodePoint(codePoint);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при appendCodePoint(int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder delete(int start, int end) {
        try {
            stringBuilder.delete(start, end);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при delete(int, int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder deleteCharAt(int index) {
        try {
            stringBuilder.deleteCharAt(index);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при deleteCharAt(int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder replace(int start, int end, String str) {
        try {
            stringBuilder.replace(start, end, str);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при replace(int, int, String): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int index, CharSequence s) {
        try {
            stringBuilder.insert(index, s);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, CharSequence): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int index, CharSequence s, int start, int end) {
        try {
            stringBuilder.insert(index, s, start, end);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, CharSequence, int, int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int dstOffset, char[] str) {
        try {
            stringBuilder.insert(dstOffset, str);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, char[]): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, String str) {
       try {
           stringBuilder.insert(offset, str);
           notifyObservers();
       } catch (Exception e) {
           System.err.println("Ошибка при insert(int, String): " + e.getMessage());
       }
       return this;
    }

    public ObservableStringBuilder insert(int offset, char[] str, int strOffset, int strLen) {
        try {
            stringBuilder.insert(offset, str, strOffset, strLen);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, char[], int, int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, boolean b) {
        try {
            stringBuilder.insert(offset, b);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, boolean): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, char c) {
        try {
            stringBuilder.insert(offset, c);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, char): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, int i) {
        try {
            stringBuilder.insert(offset, i);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, int): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, long l) {
        try {
            stringBuilder.insert(offset, l);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, long): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, float f) {
        try {
            stringBuilder.insert(offset, f);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, float): " + e.getMessage());
        }
        return this;
    }

    public ObservableStringBuilder insert(int offset, double d) {
        try {
            stringBuilder.insert(offset, d);
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при insert(int, double): " + e.getMessage());
        }
        return this;
    }

    public int indexOf(String str) {
        try {
            return stringBuilder.indexOf(str);
        } catch (Exception e) {
            System.err.println("Ошибка при indexOf(String): " + e.getMessage());
            return -1; // Или другое значение по умолчанию
        }
    }

    public int indexOf(String str, int fromIndex) {
        try {
            return stringBuilder.indexOf(str, fromIndex);
        } catch (Exception e) {
            System.err.println("Ошибка при indexOf(String, int): " + e.getMessage());
            return -1; // Или другое значение по умолчанию
        }
    }

    public int lastIndexOf(String str) {
        try {
            return stringBuilder.lastIndexOf(str);
        } catch (Exception e) {
            System.err.println("Ошибка при lastIndexOf(String): " + e.getMessage());
            return -1; // Или другое значение по умолчанию
        }
    }

    public int lastIndexOf(String str, int fromIndex) {
        try {
            return stringBuilder.lastIndexOf(str, fromIndex);
        } catch (Exception e) {
            System.err.println("Ошибка при lastIndexOf(String, int): " + e.getMessage());
            return -1; // Или другое значение по умолчанию
        }
    }

    public ObservableStringBuilder reverse() {
        try {
            stringBuilder.reverse();
            notifyObservers();
        } catch (Exception e) {
            System.err.println("Ошибка при reverse(): " + e.getMessage());
        }
        return this;
    }

    public String toString() {
        return stringBuilder.toString();
    }

    public int length() {
        return stringBuilder.length();
    }

    public int capacity() {
        return stringBuilder.capacity();
    }

    public void ensureCapacity(int minimumCapacity) {
        try {
            stringBuilder.ensureCapacity(minimumCapacity);
        } catch (Exception e) {
            System.err.println("Ошибка при ensureCapacity(int): " + e.getMessage());
        }
    }

    public void trimToSize() {
        try {
            stringBuilder.trimToSize();
        } catch (Exception e) {
            System.err.println("Ошибка при trimToSize(): " + e.getMessage());
        }
    }

    public char charAt(int index) {
        try {
            return stringBuilder.charAt(index);
        } catch (Exception e) {
            System.err.println("Ошибка при charAt(int): " + e.getMessage());
            return '\0'; // Или другой символ по умолчанию
        }
    }

    public CharSequence subSequence(int start, int end) {
        try {
            return stringBuilder.subSequence(start, end);
        } catch (Exception e) {
            System.err.println("Ошибка при subSequence(int, int): " + e.getMessage());
            return ""; // Или другая пустая CharSequence
        }
    }

    public String substring(int start) {
        try {
            return stringBuilder.substring(start);
        } catch (Exception e) {
            System.err.println("Ошибка при substring(int): " + e.getMessage());
            return ""; // Или пустая строка
        }
    }

    public String substring(int start, int end) {
        try {
            return stringBuilder.substring(start, end);
        } catch (Exception e) {
            System.err.println("Ошибка при substring(int, int): " + e.getMessage());
            return ""; // Или пустая строка
        }
    }

    // Методы для работы с наблюдателями
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    private void notifyObservers() {
        for (Observer observer : observers) {
            try {
                observer.update(this);
            } catch (Exception e) {
                System.err.println("Ошибка при уведомлении наблюдателя: " + e.getMessage());
                // Важно, чтобы ошибка в одном наблюдателе не ломала остальных.
            }
        }
    }
}

// Интерфейс наблюдателя
interface Observer {
    void update(ObservableStringBuilder builder);
}
