import java.util.Scanner;
import java.text.DecimalFormat;

public class SimpleCalculator {

    private static final DecimalFormat df = new DecimalFormat("0.00"); // Формат вывода

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.println("Консольный калькулятор");
        System.out.println("Поддерживаемые операции: +, -, *, /, ^, %, //");
        System.out.println("Введите выражение с пробелом, в формате: число операция число (например, 2 + 3)");
        System.out.println("Для выхода введите 'exit'");

        while (true) {
            System.out.println("Введите выражение:");
            String input = scanner.nextLine();

            if (input.equals("exit")) {
                System.out.println("Выход из программы.");
                break;
            }

            try {
                String[] parts = input.split(" ");
                if (parts.length != 3) {
                    System.out.println("Ошибка: Неверное количество аргументов. Введите выражение в формате 'число операция число'.");
                    continue;
                }

                double num1 = parseDouble(parts[0]);
                String operation = parts[1];
                double num2 = parseDouble(parts[2]);

                if (!isValidOperation(operation)) {
                    System.out.println("Ошибка: Неподдерживаемая операция: " + operation);
                    continue;
                }


                double result = calculate(num1, operation, num2);
                System.out.println("Результат: " + df.format(result)); // Форматированный вывод

            } catch (NumberFormatException e) {
                System.out.println("Ошибка: Неверный формат числа. Введите число.");
            } catch (IllegalArgumentException e) {
                System.out.println("Ошибка: " + e.getMessage());
            } catch (Exception e) {
                System.out.println("Ошибка: Неверное выражение. Введите еще раз.");
            }
        }

        scanner.close();
    }


    private static double parseDouble(String str) {
        try {
            return Double.parseDouble(str.replace(",", "."));
        } catch (NumberFormatException e) {
            throw new NumberFormatException("Не удалось преобразовать '" + str + "' в число.");
        }
    }


    private static boolean isValidOperation(String operation) {
        return "+-*/^%//".contains(operation);
    }


    public static double calculate(double num1, String operation, double num2) {
        switch (operation) {
            case "+":
                return sum(num1, num2);
            case "-":
                return subtract(num1, num2);
            case "*":
                return multiply(num1, num2);
            case "/":
                return divide(num1, num2);
            case "//":
                return integerDivide(num1, num2);
            case "^":
                return power(num1, num2);
            case "%":
                return modulo(num1, num2);
            default:
                throw new IllegalArgumentException("Неподдерживаемая операция.");
        }
    }

    public static double sum(double a, double b) {
        return a + b;
    }

    public static double subtract(double a, double b) {
        return a - b;
    }

    public static double multiply(double a, double b) {
        return a * b;
    }

    public static double divide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException("Ошибка - деление на 0.");
        }
        return a / b;
    }

    public static double integerDivide(double a, double b) {
        if (b == 0) {
            throw new IllegalArgumentException("Ошибка - целочисленное деление на 0.");
        }
        return (int) (a / b);
    }

    public static double power(double a, double b) {
        return Math.pow(a, b);
    }

    public static double modulo(double a, double b) {
        return a % b;
    }
}
