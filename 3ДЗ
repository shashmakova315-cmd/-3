import .util.Scanner;
import java.util.InputMismatchException;

// Enum для типа топлива
enum FuelType {
    GASOLINE,
    DIESEL,
    ELECTRICITY,
    HUMAN
}

// Класс для топлива
class Fuel {
    private FuelType type;
    private double volume;

    public Fuel(FuelType type, double volume) {
        this.type = type;
        this.volume = volume;
    }

    public FuelType getType() {
        return type;
    }

    public double getVolume() {
        return volume;
    }

    public void refuel(double amount) {
        if (amount <= 0) {
            throw new IllegalArgumentException("Ошибка: Количество топлива для заправки должно быть положительным.");
        }
        this.volume += amount;
        System.out.println("Заправлено " + amount + " единиц топлива. Текущий уровень топлива: " + this.volume);
    }

    @Override
    public String toString() {
        return "Тип топлива: " + type + ", Объем: " + volume;
    }
}

// Класс для двигателя
class Engine {
    private int power;
    private String type;

    public Engine(int power, String type) {
        if (power <= 0) {
            throw new IllegalArgumentException("Ошибка: Мощность двигателя должна быть положительной.");
        }
        this.power = power;
        this.type = type;
    }

    public void start() {
        System.out.println("Двигатель запущен (" + type + ", мощность " + power + " л.с.)");
    }

    public void stop() {
        System.out.println("Двигатель остановлен");
    }

    @Override
    public String toString() {
        return "Тип: " + type + ", Мощность: " + power + " л.с.";
    }
}

// Абстрактный класс для транспорта
abstract class Transport {
    protected Engine engine;
    protected Fuel fuel;

    public Transport(Engine engine, Fuel fuel) {
        if (engine == null || fuel == null) {
            throw new IllegalArgumentException("Ошибка: Двигатель и топливо не могут быть null.");
        }
        this.engine = engine;
        this.fuel = fuel;
    }

    public abstract void move();

    public String getInfo() {
        return "Двигатель: " + engine + "\nТопливо: " + fuel;
    }

    public Engine getEngine() {
        return engine;
    }

    public Fuel getFuel() {
        return fuel;
    }
}

// Класс для автомобиля (наследуется от Transport)
final class Car extends Transport {
    private int numberOfDoors;

    public Car(Engine engine, Fuel fuel, int numberOfDoors) {
        super(engine, fuel);
        if (numberOfDoors <= 0) {
            throw new IllegalArgumentException("Ошибка: Количество дверей должно быть положительным.");
        }
        this.numberOfDoors = numberOfDoors;
    }

    @Override
    public void move() {
        engine.start();
        System.out.println("Автомобиль едет по дороге.");
    }

    @Override
    public String getInfo() {
        return "Автомобиль (Количество дверей: " + numberOfDoors + ")\n" + super.getInfo();
    }
}

// Класс для самолета (наследуется от Transport)
final class Airplane extends Transport {
    private int wingspan;

    public Airplane(Engine engine, Fuel fuel, int wingspan) {
        super(engine, fuel);
        if (wingspan <= 0) {
            throw new IllegalArgumentException("Ошибка: Размах крыльев должен быть положительным.");
        }
        this.wingspan = wingspan;
    }

    @Override
    public void move() {
        engine.start();
        System.out.println("Самолет летит в небе.");
    }

    @Override
    public String getInfo() {
        return "Самолет (Размах крыльев: " + wingspan + " метров)\n" + super.getInfo();
    }
}

// Класс для корабля (наследуется от Transport)
final class Ship extends Transport {
    private int tonnage;

    public Ship(Engine engine, Fuel fuel, int tonnage) {
        super(engine, fuel);
        if (tonnage <= 0) {
            throw new IllegalArgumentException("Ошибка: Тоннаж должен быть положительным.");
        }
        this.tonnage = tonnage;
    }

    @Override
    public void move() {
        engine.start();
        System.out.println("Корабль плывет по морю.");
    }

    @Override
    public String getInfo() {
        return "Корабль (Тоннаж: " + tonnage + " тонн)\n" + super.getInfo();
    }
}

// Класс для велосипеда (наследуется от Transport)
final class Bicycle extends Transport {
    private boolean hasBasket;

    public Bicycle(boolean hasBasket) {
        super(new Engine(1, "Ноги"), new Fuel(FuelType.HUMAN, 100)); // Велосипед использует "двигатель" ноги и "топливо" человека
        this.hasBasket = hasBasket;
    }

    @Override
    public void move() {
        System.out.println("Велосипед едет по дороге (или тротуару).");
    }

    @Override
    public String getInfo() {
        return "Велосипед (Есть корзина: " + hasBasket + ")\n" + super.getInfo();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        try {
            // Пример создания автомобиля
            Engine carEngine = new Engine(150, "Бензиновый");
            Fuel carFuel = new Fuel(FuelType.GASOLINE, 50);
            Car myCar = new Car(carEngine, carFuel, 4);
            System.out.println(myCar.getInfo());
            myCar.move();

             System.out.println("Сколько топлива заправить в автомобиль?");
             double amount = scanner.nextDouble();
             myCar.getFuel().refuel(amount);

            // Пример создания самолета
            Engine airplaneEngine = new Engine(10000, "Турбореактивный");
            Fuel airplaneFuel = new Fuel(FuelType.DIESEL, 10000);
            Airplane myAirplane = new Airplane(airplaneEngine, airplaneFuel, 30);
            System.out.println(myAirplane.getInfo());
            myAirplane.move();
        } catch (IllegalArgumentException e) {
            System.err.println("Ошибка при создании объекта: " + e.getMessage());
        }  catch (InputMismatchException e) {
            System.err.println("Ошибка ввода: Неверный формат числа.");
            scanner.next(); // Очистить некорректный ввод из сканера
        }   catch (Exception e) {
            System.err.println("Произошла непредвиденная ошибка: " + e.getMessage());
        } finally {
            scanner.close();
        }
    }
}
